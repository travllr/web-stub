// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: visa.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum Com_Infinite_Travllr_Visa_Occupation: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case salaried // = 0
  case selfEmployed // = 1
  case UNRECOGNIZED(Int)

  init() {
    self = .salaried
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .salaried
    case 1: self = .selfEmployed
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .salaried: return 0
    case .selfEmployed: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

}

enum Com_Infinite_Travllr_Visa_MaritalStatus: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case single // = 0
  case married // = 1
  case UNRECOGNIZED(Int)

  init() {
    self = .single
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .single
    case 1: self = .married
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .single: return 0
    case .married: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

}

enum Com_Infinite_Travllr_Visa_VisaCategoryType: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case financials // = 0
  case forms // = 1
  case identity // = 2
  case occupation // = 3
  case vouchers // = 4
  case submission // = 5
  case info // = 6
  case UNRECOGNIZED(Int)

  init() {
    self = .financials
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .financials
    case 1: self = .forms
    case 2: self = .identity
    case 3: self = .occupation
    case 4: self = .vouchers
    case 5: self = .submission
    case 6: self = .info
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .financials: return 0
    case .forms: return 1
    case .identity: return 2
    case .occupation: return 3
    case .vouchers: return 4
    case .submission: return 5
    case .info: return 6
    case .UNRECOGNIZED(let i): return i
    }
  }

}

struct Com_Infinite_Travllr_Visa_VisaDocumentsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var country: [String] = []

  var isSingleSalaried: Bool = false

  var isSingleSelfEmployed: Bool = false

  var isMarriedSalaried: Bool = false

  var isMarriedSelfEmployed: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Com_Infinite_Travllr_Visa_VisaDocumentFile {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var name: String = String()

  var category: String = String()

  var hrefLink: String = String()

  var workingHours: String = String()

  var embassyWebsite: String = String()

  var countryList: [String] = []

  var forSingleSalaried: Bool = false

  var forSingleSelfEmployed: Bool = false

  var forMarriedSalaried: Bool = false

  var forMarriedSelfEmployed: Bool = false

  var documentContent: String = String()

  var id: String = String()

  var isOnArrivalVisa: Bool = false

  var isSchengenVisa: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Com_Infinite_Travllr_Visa_VisaDocumentsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var documents: [Com_Infinite_Travllr_Visa_VisaDocumentFile] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Com_Infinite_Travllr_Visa_SearchVisaDocumentRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var country: [String] = []

  var category: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Com_Infinite_Travllr_Visa_SearchVisaDocumentResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var documents: [Com_Infinite_Travllr_Visa_VisaDocumentFile] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Com_Infinite_Travllr_Visa_DeleteVisaDocumentRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Com_Infinite_Travllr_Visa_DeleteVisaDocumentResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var status: String = String()

  var response: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Com_Infinite_Travllr_Visa_UpdateVisaDocumentRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var categoryType: String = String()

  var country: [String] = []

  var workingDays: String = String()

  var website: String = String()

  var title: String = String()

  var description_p: String = String()

  var documentLink: String = String()

  var isSingleSalaried: Bool = false

  var isSingleSelfEmployed: Bool = false

  var isMarriedSalaried: Bool = false

  var isMarriedSelfEmployed: Bool = false

  var isOnArrivalVisa: Bool = false

  var isSchengenVisa: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Com_Infinite_Travllr_Visa_UpdateVisaDocumentResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var status: String = String()

  var response: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Com_Infinite_Travllr_Visa_CountryRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Com_Infinite_Travllr_Visa_Country {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var name: String = String()

  var code: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Com_Infinite_Travllr_Visa_CountryListResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var countries: [Com_Infinite_Travllr_Visa_Country] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Com_Infinite_Travllr_Visa_VisaCountryList {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var country: String = String()

  var isOnArrivalVisa: Bool = false

  var isSchengenVisa: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Com_Infinite_Travllr_Visa_VisaCountryListResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var visaCountries: [Com_Infinite_Travllr_Visa_VisaCountryList] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Com_Infinite_Travllr_Visa_CityListDetail {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var name: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Com_Infinite_Travllr_Visa_CityListResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var cities: [Com_Infinite_Travllr_Visa_CityListDetail] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Com_Infinite_Travllr_Visa_EmptyRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Com_Infinite_Travllr_Visa_AddVisaDocumentRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var categoryType: String = String()

  var country: [String] = []

  var workingDays: String = String()

  var website: String = String()

  var title: String = String()

  var description_p: String = String()

  var documentLink: String = String()

  var isSingleSalaried: Bool = false

  var isSingleSelfEmployed: Bool = false

  var isMarriedSalaried: Bool = false

  var isMarriedSelfEmployed: Bool = false

  var isOnArrivalVisa: Bool = false

  var isSchengenVisa: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Com_Infinite_Travllr_Visa_AddVisaDocumentResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var status: String = String()

  var response: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "com.infinite.travllr.visa"

extension Com_Infinite_Travllr_Visa_Occupation: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "SALARIED"),
    1: .same(proto: "SELF_EMPLOYED"),
  ]
}

extension Com_Infinite_Travllr_Visa_MaritalStatus: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "SINGLE"),
    1: .same(proto: "MARRIED"),
  ]
}

extension Com_Infinite_Travllr_Visa_VisaCategoryType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "FINANCIALS"),
    1: .same(proto: "FORMS"),
    2: .same(proto: "IDENTITY"),
    3: .same(proto: "OCCUPATION"),
    4: .same(proto: "VOUCHERS"),
    5: .same(proto: "SUBMISSION"),
    6: .same(proto: "INFO"),
  ]
}

extension Com_Infinite_Travllr_Visa_VisaDocumentsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".VisaDocumentsRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "country"),
    2: .same(proto: "isSingleSalaried"),
    3: .same(proto: "isSingleSelfEmployed"),
    4: .same(proto: "isMarriedSalaried"),
    5: .same(proto: "isMarriedSelfEmployed"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedStringField(value: &self.country)
      case 2: try decoder.decodeSingularBoolField(value: &self.isSingleSalaried)
      case 3: try decoder.decodeSingularBoolField(value: &self.isSingleSelfEmployed)
      case 4: try decoder.decodeSingularBoolField(value: &self.isMarriedSalaried)
      case 5: try decoder.decodeSingularBoolField(value: &self.isMarriedSelfEmployed)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.country.isEmpty {
      try visitor.visitRepeatedStringField(value: self.country, fieldNumber: 1)
    }
    if self.isSingleSalaried != false {
      try visitor.visitSingularBoolField(value: self.isSingleSalaried, fieldNumber: 2)
    }
    if self.isSingleSelfEmployed != false {
      try visitor.visitSingularBoolField(value: self.isSingleSelfEmployed, fieldNumber: 3)
    }
    if self.isMarriedSalaried != false {
      try visitor.visitSingularBoolField(value: self.isMarriedSalaried, fieldNumber: 4)
    }
    if self.isMarriedSelfEmployed != false {
      try visitor.visitSingularBoolField(value: self.isMarriedSelfEmployed, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Com_Infinite_Travllr_Visa_VisaDocumentsRequest) -> Bool {
    if self.country != other.country {return false}
    if self.isSingleSalaried != other.isSingleSalaried {return false}
    if self.isSingleSelfEmployed != other.isSingleSelfEmployed {return false}
    if self.isMarriedSalaried != other.isMarriedSalaried {return false}
    if self.isMarriedSelfEmployed != other.isMarriedSelfEmployed {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Com_Infinite_Travllr_Visa_VisaDocumentFile: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".VisaDocumentFile"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "category"),
    3: .same(proto: "hrefLink"),
    4: .same(proto: "workingHours"),
    5: .same(proto: "embassyWebsite"),
    6: .same(proto: "countryList"),
    7: .same(proto: "forSingleSalaried"),
    8: .same(proto: "forSingleSelfEmployed"),
    9: .same(proto: "forMarriedSalaried"),
    10: .same(proto: "forMarriedSelfEmployed"),
    11: .same(proto: "documentContent"),
    12: .same(proto: "id"),
    13: .same(proto: "isOnArrivalVisa"),
    14: .same(proto: "isSchengenVisa"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.name)
      case 2: try decoder.decodeSingularStringField(value: &self.category)
      case 3: try decoder.decodeSingularStringField(value: &self.hrefLink)
      case 4: try decoder.decodeSingularStringField(value: &self.workingHours)
      case 5: try decoder.decodeSingularStringField(value: &self.embassyWebsite)
      case 6: try decoder.decodeRepeatedStringField(value: &self.countryList)
      case 7: try decoder.decodeSingularBoolField(value: &self.forSingleSalaried)
      case 8: try decoder.decodeSingularBoolField(value: &self.forSingleSelfEmployed)
      case 9: try decoder.decodeSingularBoolField(value: &self.forMarriedSalaried)
      case 10: try decoder.decodeSingularBoolField(value: &self.forMarriedSelfEmployed)
      case 11: try decoder.decodeSingularStringField(value: &self.documentContent)
      case 12: try decoder.decodeSingularStringField(value: &self.id)
      case 13: try decoder.decodeSingularBoolField(value: &self.isOnArrivalVisa)
      case 14: try decoder.decodeSingularBoolField(value: &self.isSchengenVisa)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.category.isEmpty {
      try visitor.visitSingularStringField(value: self.category, fieldNumber: 2)
    }
    if !self.hrefLink.isEmpty {
      try visitor.visitSingularStringField(value: self.hrefLink, fieldNumber: 3)
    }
    if !self.workingHours.isEmpty {
      try visitor.visitSingularStringField(value: self.workingHours, fieldNumber: 4)
    }
    if !self.embassyWebsite.isEmpty {
      try visitor.visitSingularStringField(value: self.embassyWebsite, fieldNumber: 5)
    }
    if !self.countryList.isEmpty {
      try visitor.visitRepeatedStringField(value: self.countryList, fieldNumber: 6)
    }
    if self.forSingleSalaried != false {
      try visitor.visitSingularBoolField(value: self.forSingleSalaried, fieldNumber: 7)
    }
    if self.forSingleSelfEmployed != false {
      try visitor.visitSingularBoolField(value: self.forSingleSelfEmployed, fieldNumber: 8)
    }
    if self.forMarriedSalaried != false {
      try visitor.visitSingularBoolField(value: self.forMarriedSalaried, fieldNumber: 9)
    }
    if self.forMarriedSelfEmployed != false {
      try visitor.visitSingularBoolField(value: self.forMarriedSelfEmployed, fieldNumber: 10)
    }
    if !self.documentContent.isEmpty {
      try visitor.visitSingularStringField(value: self.documentContent, fieldNumber: 11)
    }
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 12)
    }
    if self.isOnArrivalVisa != false {
      try visitor.visitSingularBoolField(value: self.isOnArrivalVisa, fieldNumber: 13)
    }
    if self.isSchengenVisa != false {
      try visitor.visitSingularBoolField(value: self.isSchengenVisa, fieldNumber: 14)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Com_Infinite_Travllr_Visa_VisaDocumentFile) -> Bool {
    if self.name != other.name {return false}
    if self.category != other.category {return false}
    if self.hrefLink != other.hrefLink {return false}
    if self.workingHours != other.workingHours {return false}
    if self.embassyWebsite != other.embassyWebsite {return false}
    if self.countryList != other.countryList {return false}
    if self.forSingleSalaried != other.forSingleSalaried {return false}
    if self.forSingleSelfEmployed != other.forSingleSelfEmployed {return false}
    if self.forMarriedSalaried != other.forMarriedSalaried {return false}
    if self.forMarriedSelfEmployed != other.forMarriedSelfEmployed {return false}
    if self.documentContent != other.documentContent {return false}
    if self.id != other.id {return false}
    if self.isOnArrivalVisa != other.isOnArrivalVisa {return false}
    if self.isSchengenVisa != other.isSchengenVisa {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Com_Infinite_Travllr_Visa_VisaDocumentsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".VisaDocumentsResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "documents"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.documents)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.documents.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.documents, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Com_Infinite_Travllr_Visa_VisaDocumentsResponse) -> Bool {
    if self.documents != other.documents {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Com_Infinite_Travllr_Visa_SearchVisaDocumentRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SearchVisaDocumentRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "country"),
    2: .same(proto: "category"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedStringField(value: &self.country)
      case 2: try decoder.decodeSingularStringField(value: &self.category)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.country.isEmpty {
      try visitor.visitRepeatedStringField(value: self.country, fieldNumber: 1)
    }
    if !self.category.isEmpty {
      try visitor.visitSingularStringField(value: self.category, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Com_Infinite_Travllr_Visa_SearchVisaDocumentRequest) -> Bool {
    if self.country != other.country {return false}
    if self.category != other.category {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Com_Infinite_Travllr_Visa_SearchVisaDocumentResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SearchVisaDocumentResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "documents"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.documents)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.documents.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.documents, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Com_Infinite_Travllr_Visa_SearchVisaDocumentResponse) -> Bool {
    if self.documents != other.documents {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Com_Infinite_Travllr_Visa_DeleteVisaDocumentRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DeleteVisaDocumentRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Com_Infinite_Travllr_Visa_DeleteVisaDocumentRequest) -> Bool {
    if self.id != other.id {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Com_Infinite_Travllr_Visa_DeleteVisaDocumentResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DeleteVisaDocumentResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "response"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.status)
      case 2: try decoder.decodeSingularStringField(value: &self.response)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.status.isEmpty {
      try visitor.visitSingularStringField(value: self.status, fieldNumber: 1)
    }
    if !self.response.isEmpty {
      try visitor.visitSingularStringField(value: self.response, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Com_Infinite_Travllr_Visa_DeleteVisaDocumentResponse) -> Bool {
    if self.status != other.status {return false}
    if self.response != other.response {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Com_Infinite_Travllr_Visa_UpdateVisaDocumentRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UpdateVisaDocumentRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "categoryType"),
    3: .same(proto: "country"),
    4: .standard(proto: "working_days"),
    5: .same(proto: "website"),
    6: .same(proto: "title"),
    7: .same(proto: "description"),
    8: .standard(proto: "document_link"),
    9: .same(proto: "isSingleSalaried"),
    10: .same(proto: "isSingleSelfEmployed"),
    11: .same(proto: "isMarriedSalaried"),
    12: .same(proto: "isMarriedSelfEmployed"),
    13: .same(proto: "isOnArrivalVisa"),
    14: .same(proto: "isSchengenVisa"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.categoryType)
      case 3: try decoder.decodeRepeatedStringField(value: &self.country)
      case 4: try decoder.decodeSingularStringField(value: &self.workingDays)
      case 5: try decoder.decodeSingularStringField(value: &self.website)
      case 6: try decoder.decodeSingularStringField(value: &self.title)
      case 7: try decoder.decodeSingularStringField(value: &self.description_p)
      case 8: try decoder.decodeSingularStringField(value: &self.documentLink)
      case 9: try decoder.decodeSingularBoolField(value: &self.isSingleSalaried)
      case 10: try decoder.decodeSingularBoolField(value: &self.isSingleSelfEmployed)
      case 11: try decoder.decodeSingularBoolField(value: &self.isMarriedSalaried)
      case 12: try decoder.decodeSingularBoolField(value: &self.isMarriedSelfEmployed)
      case 13: try decoder.decodeSingularBoolField(value: &self.isOnArrivalVisa)
      case 14: try decoder.decodeSingularBoolField(value: &self.isSchengenVisa)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.categoryType.isEmpty {
      try visitor.visitSingularStringField(value: self.categoryType, fieldNumber: 2)
    }
    if !self.country.isEmpty {
      try visitor.visitRepeatedStringField(value: self.country, fieldNumber: 3)
    }
    if !self.workingDays.isEmpty {
      try visitor.visitSingularStringField(value: self.workingDays, fieldNumber: 4)
    }
    if !self.website.isEmpty {
      try visitor.visitSingularStringField(value: self.website, fieldNumber: 5)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 6)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 7)
    }
    if !self.documentLink.isEmpty {
      try visitor.visitSingularStringField(value: self.documentLink, fieldNumber: 8)
    }
    if self.isSingleSalaried != false {
      try visitor.visitSingularBoolField(value: self.isSingleSalaried, fieldNumber: 9)
    }
    if self.isSingleSelfEmployed != false {
      try visitor.visitSingularBoolField(value: self.isSingleSelfEmployed, fieldNumber: 10)
    }
    if self.isMarriedSalaried != false {
      try visitor.visitSingularBoolField(value: self.isMarriedSalaried, fieldNumber: 11)
    }
    if self.isMarriedSelfEmployed != false {
      try visitor.visitSingularBoolField(value: self.isMarriedSelfEmployed, fieldNumber: 12)
    }
    if self.isOnArrivalVisa != false {
      try visitor.visitSingularBoolField(value: self.isOnArrivalVisa, fieldNumber: 13)
    }
    if self.isSchengenVisa != false {
      try visitor.visitSingularBoolField(value: self.isSchengenVisa, fieldNumber: 14)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Com_Infinite_Travllr_Visa_UpdateVisaDocumentRequest) -> Bool {
    if self.id != other.id {return false}
    if self.categoryType != other.categoryType {return false}
    if self.country != other.country {return false}
    if self.workingDays != other.workingDays {return false}
    if self.website != other.website {return false}
    if self.title != other.title {return false}
    if self.description_p != other.description_p {return false}
    if self.documentLink != other.documentLink {return false}
    if self.isSingleSalaried != other.isSingleSalaried {return false}
    if self.isSingleSelfEmployed != other.isSingleSelfEmployed {return false}
    if self.isMarriedSalaried != other.isMarriedSalaried {return false}
    if self.isMarriedSelfEmployed != other.isMarriedSelfEmployed {return false}
    if self.isOnArrivalVisa != other.isOnArrivalVisa {return false}
    if self.isSchengenVisa != other.isSchengenVisa {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Com_Infinite_Travllr_Visa_UpdateVisaDocumentResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UpdateVisaDocumentResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "response"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.status)
      case 2: try decoder.decodeSingularStringField(value: &self.response)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.status.isEmpty {
      try visitor.visitSingularStringField(value: self.status, fieldNumber: 1)
    }
    if !self.response.isEmpty {
      try visitor.visitSingularStringField(value: self.response, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Com_Infinite_Travllr_Visa_UpdateVisaDocumentResponse) -> Bool {
    if self.status != other.status {return false}
    if self.response != other.response {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Com_Infinite_Travllr_Visa_CountryRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CountryRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Com_Infinite_Travllr_Visa_CountryRequest) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Com_Infinite_Travllr_Visa_Country: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Country"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "code"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.name)
      case 2: try decoder.decodeSingularStringField(value: &self.code)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.code.isEmpty {
      try visitor.visitSingularStringField(value: self.code, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Com_Infinite_Travllr_Visa_Country) -> Bool {
    if self.name != other.name {return false}
    if self.code != other.code {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Com_Infinite_Travllr_Visa_CountryListResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CountryListResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "countries"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.countries)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.countries.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.countries, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Com_Infinite_Travllr_Visa_CountryListResponse) -> Bool {
    if self.countries != other.countries {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Com_Infinite_Travllr_Visa_VisaCountryList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".VisaCountryList"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "country"),
    2: .same(proto: "isOnArrivalVisa"),
    3: .same(proto: "isSchengenVisa"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.country)
      case 2: try decoder.decodeSingularBoolField(value: &self.isOnArrivalVisa)
      case 3: try decoder.decodeSingularBoolField(value: &self.isSchengenVisa)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.country.isEmpty {
      try visitor.visitSingularStringField(value: self.country, fieldNumber: 1)
    }
    if self.isOnArrivalVisa != false {
      try visitor.visitSingularBoolField(value: self.isOnArrivalVisa, fieldNumber: 2)
    }
    if self.isSchengenVisa != false {
      try visitor.visitSingularBoolField(value: self.isSchengenVisa, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Com_Infinite_Travllr_Visa_VisaCountryList) -> Bool {
    if self.country != other.country {return false}
    if self.isOnArrivalVisa != other.isOnArrivalVisa {return false}
    if self.isSchengenVisa != other.isSchengenVisa {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Com_Infinite_Travllr_Visa_VisaCountryListResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".VisaCountryListResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "visaCountries"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.visaCountries)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.visaCountries.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.visaCountries, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Com_Infinite_Travllr_Visa_VisaCountryListResponse) -> Bool {
    if self.visaCountries != other.visaCountries {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Com_Infinite_Travllr_Visa_CityListDetail: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CityListDetail"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.name)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Com_Infinite_Travllr_Visa_CityListDetail) -> Bool {
    if self.name != other.name {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Com_Infinite_Travllr_Visa_CityListResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CityListResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "cities"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.cities)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.cities.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.cities, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Com_Infinite_Travllr_Visa_CityListResponse) -> Bool {
    if self.cities != other.cities {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Com_Infinite_Travllr_Visa_EmptyRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EmptyRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Com_Infinite_Travllr_Visa_EmptyRequest) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Com_Infinite_Travllr_Visa_AddVisaDocumentRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AddVisaDocumentRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "categoryType"),
    2: .same(proto: "country"),
    3: .standard(proto: "working_days"),
    4: .same(proto: "website"),
    5: .same(proto: "title"),
    6: .same(proto: "description"),
    7: .standard(proto: "document_link"),
    8: .same(proto: "isSingleSalaried"),
    9: .same(proto: "isSingleSelfEmployed"),
    10: .same(proto: "isMarriedSalaried"),
    11: .same(proto: "isMarriedSelfEmployed"),
    12: .same(proto: "isOnArrivalVisa"),
    13: .same(proto: "isSchengenVisa"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.categoryType)
      case 2: try decoder.decodeRepeatedStringField(value: &self.country)
      case 3: try decoder.decodeSingularStringField(value: &self.workingDays)
      case 4: try decoder.decodeSingularStringField(value: &self.website)
      case 5: try decoder.decodeSingularStringField(value: &self.title)
      case 6: try decoder.decodeSingularStringField(value: &self.description_p)
      case 7: try decoder.decodeSingularStringField(value: &self.documentLink)
      case 8: try decoder.decodeSingularBoolField(value: &self.isSingleSalaried)
      case 9: try decoder.decodeSingularBoolField(value: &self.isSingleSelfEmployed)
      case 10: try decoder.decodeSingularBoolField(value: &self.isMarriedSalaried)
      case 11: try decoder.decodeSingularBoolField(value: &self.isMarriedSelfEmployed)
      case 12: try decoder.decodeSingularBoolField(value: &self.isOnArrivalVisa)
      case 13: try decoder.decodeSingularBoolField(value: &self.isSchengenVisa)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.categoryType.isEmpty {
      try visitor.visitSingularStringField(value: self.categoryType, fieldNumber: 1)
    }
    if !self.country.isEmpty {
      try visitor.visitRepeatedStringField(value: self.country, fieldNumber: 2)
    }
    if !self.workingDays.isEmpty {
      try visitor.visitSingularStringField(value: self.workingDays, fieldNumber: 3)
    }
    if !self.website.isEmpty {
      try visitor.visitSingularStringField(value: self.website, fieldNumber: 4)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 5)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 6)
    }
    if !self.documentLink.isEmpty {
      try visitor.visitSingularStringField(value: self.documentLink, fieldNumber: 7)
    }
    if self.isSingleSalaried != false {
      try visitor.visitSingularBoolField(value: self.isSingleSalaried, fieldNumber: 8)
    }
    if self.isSingleSelfEmployed != false {
      try visitor.visitSingularBoolField(value: self.isSingleSelfEmployed, fieldNumber: 9)
    }
    if self.isMarriedSalaried != false {
      try visitor.visitSingularBoolField(value: self.isMarriedSalaried, fieldNumber: 10)
    }
    if self.isMarriedSelfEmployed != false {
      try visitor.visitSingularBoolField(value: self.isMarriedSelfEmployed, fieldNumber: 11)
    }
    if self.isOnArrivalVisa != false {
      try visitor.visitSingularBoolField(value: self.isOnArrivalVisa, fieldNumber: 12)
    }
    if self.isSchengenVisa != false {
      try visitor.visitSingularBoolField(value: self.isSchengenVisa, fieldNumber: 13)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Com_Infinite_Travllr_Visa_AddVisaDocumentRequest) -> Bool {
    if self.categoryType != other.categoryType {return false}
    if self.country != other.country {return false}
    if self.workingDays != other.workingDays {return false}
    if self.website != other.website {return false}
    if self.title != other.title {return false}
    if self.description_p != other.description_p {return false}
    if self.documentLink != other.documentLink {return false}
    if self.isSingleSalaried != other.isSingleSalaried {return false}
    if self.isSingleSelfEmployed != other.isSingleSelfEmployed {return false}
    if self.isMarriedSalaried != other.isMarriedSalaried {return false}
    if self.isMarriedSelfEmployed != other.isMarriedSelfEmployed {return false}
    if self.isOnArrivalVisa != other.isOnArrivalVisa {return false}
    if self.isSchengenVisa != other.isSchengenVisa {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Com_Infinite_Travllr_Visa_AddVisaDocumentResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AddVisaDocumentResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "status"),
    2: .same(proto: "response"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.status)
      case 2: try decoder.decodeSingularStringField(value: &self.response)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.status.isEmpty {
      try visitor.visitSingularStringField(value: self.status, fieldNumber: 1)
    }
    if !self.response.isEmpty {
      try visitor.visitSingularStringField(value: self.response, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Com_Infinite_Travllr_Visa_AddVisaDocumentResponse) -> Bool {
    if self.status != other.status {return false}
    if self.response != other.response {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
