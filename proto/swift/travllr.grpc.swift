//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: travllr.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Foundation
import Dispatch
import SwiftGRPC
import SwiftProtobuf

internal protocol FlightServiceGetFlightsCall: ClientCallUnary {}

fileprivate final class FlightServiceGetFlightsCallBase: ClientCallUnaryBase<FlightRequest, FlightResponse>, FlightServiceGetFlightsCall {
  override class var method: String { return "/FlightService/GetFlights" }
}


/// Instantiate FlightServiceServiceClient, then call methods of this protocol to make API calls.
internal protocol FlightServiceService: ServiceClient {
  /// Synchronous. Unary.
  func getFlights(_ request: FlightRequest) throws -> FlightResponse
  /// Asynchronous. Unary.
  func getFlights(_ request: FlightRequest, completion: @escaping (FlightResponse?, CallResult) -> Void) throws -> FlightServiceGetFlightsCall

}

internal final class FlightServiceServiceClient: ServiceClientBase, FlightServiceService {
  /// Synchronous. Unary.
  internal func getFlights(_ request: FlightRequest) throws -> FlightResponse {
    return try FlightServiceGetFlightsCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func getFlights(_ request: FlightRequest, completion: @escaping (FlightResponse?, CallResult) -> Void) throws -> FlightServiceGetFlightsCall {
    return try FlightServiceGetFlightsCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

}
internal protocol MultiCityServiceGetItineraryCall: ClientCallUnary {}

fileprivate final class MultiCityServiceGetItineraryCallBase: ClientCallUnaryBase<MultiCityRequest, MultiCityResponse>, MultiCityServiceGetItineraryCall {
  override class var method: String { return "/MultiCityService/GetItinerary" }
}


/// Instantiate MultiCityServiceServiceClient, then call methods of this protocol to make API calls.
internal protocol MultiCityServiceService: ServiceClient {
  /// Synchronous. Unary.
  func getItinerary(_ request: MultiCityRequest) throws -> MultiCityResponse
  /// Asynchronous. Unary.
  func getItinerary(_ request: MultiCityRequest, completion: @escaping (MultiCityResponse?, CallResult) -> Void) throws -> MultiCityServiceGetItineraryCall

}

internal final class MultiCityServiceServiceClient: ServiceClientBase, MultiCityServiceService {
  /// Synchronous. Unary.
  internal func getItinerary(_ request: MultiCityRequest) throws -> MultiCityResponse {
    return try MultiCityServiceGetItineraryCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func getItinerary(_ request: MultiCityRequest, completion: @escaping (MultiCityResponse?, CallResult) -> Void) throws -> MultiCityServiceGetItineraryCall {
    return try MultiCityServiceGetItineraryCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

}

