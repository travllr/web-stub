// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: airline.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum Com_Infinite_Travllr_Airline_JourneyType: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case unknown // = 0
  case oneway // = 1
  case `return` // = 2
  case multistop // = 3
  case advancedSearch // = 4
  case specialReturn // = 5
  case UNRECOGNIZED(Int)

  init() {
    self = .unknown
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .oneway
    case 2: self = .return
    case 3: self = .multistop
    case 4: self = .advancedSearch
    case 5: self = .specialReturn
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .oneway: return 1
    case .return: return 2
    case .multistop: return 3
    case .advancedSearch: return 4
    case .specialReturn: return 5
    case .UNRECOGNIZED(let i): return i
    }
  }

}

enum Com_Infinite_Travllr_Airline_CabinClass: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case dummy // = 0
  case all // = 1
  case economy // = 2
  case premiumEconomy // = 3
  case business // = 4
  case premiumBusiness // = 5
  case first // = 6
  case UNRECOGNIZED(Int)

  init() {
    self = .dummy
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .dummy
    case 1: self = .all
    case 2: self = .economy
    case 3: self = .premiumEconomy
    case 4: self = .business
    case 5: self = .premiumBusiness
    case 6: self = .first
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .dummy: return 0
    case .all: return 1
    case .economy: return 2
    case .premiumEconomy: return 3
    case .business: return 4
    case .premiumBusiness: return 5
    case .first: return 6
    case .UNRECOGNIZED(let i): return i
    }
  }

}

struct Com_Infinite_Travllr_Airline_AirlineRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var endUserIp: String = String()

  var adultCount: Int32 = 0

  var childCount: Int32 = 0

  var infantCount: Int32 = 0

  var journeyType: Com_Infinite_Travllr_Airline_JourneyType = .unknown

  var segments: [Com_Infinite_Travllr_Airline_Segment] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Com_Infinite_Travllr_Airline_Segment {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var origin: String = String()

  var destination: String = String()

  var departureDate: String = String()

  var arrivalDate: String = String()

  var cabinClass: Com_Infinite_Travllr_Airline_CabinClass = .dummy

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Com_Infinite_Travllr_Airline_AirlineResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var traceID: String = String()

  var origin: String = String()

  var destination: String = String()

  var results: [Com_Infinite_Travllr_Airline_Results] = []

  var isRefundable: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Com_Infinite_Travllr_Airline_Results {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "com.infinite.travllr.airline"

extension Com_Infinite_Travllr_Airline_JourneyType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN"),
    1: .same(proto: "ONEWAY"),
    2: .same(proto: "RETURN"),
    3: .same(proto: "MULTISTOP"),
    4: .same(proto: "ADVANCED_SEARCH"),
    5: .same(proto: "SPECIAL_RETURN"),
  ]
}

extension Com_Infinite_Travllr_Airline_CabinClass: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "DUMMY"),
    1: .same(proto: "ALL"),
    2: .same(proto: "ECONOMY"),
    3: .same(proto: "PREMIUM_ECONOMY"),
    4: .same(proto: "BUSINESS"),
    5: .same(proto: "PREMIUM_BUSINESS"),
    6: .same(proto: "FIRST"),
  ]
}

extension Com_Infinite_Travllr_Airline_AirlineRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AirlineRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "endUserIp"),
    2: .same(proto: "adultCount"),
    3: .same(proto: "childCount"),
    4: .same(proto: "infantCount"),
    5: .same(proto: "journeyType"),
    6: .same(proto: "segments"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.endUserIp)
      case 2: try decoder.decodeSingularInt32Field(value: &self.adultCount)
      case 3: try decoder.decodeSingularInt32Field(value: &self.childCount)
      case 4: try decoder.decodeSingularInt32Field(value: &self.infantCount)
      case 5: try decoder.decodeSingularEnumField(value: &self.journeyType)
      case 6: try decoder.decodeRepeatedMessageField(value: &self.segments)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.endUserIp.isEmpty {
      try visitor.visitSingularStringField(value: self.endUserIp, fieldNumber: 1)
    }
    if self.adultCount != 0 {
      try visitor.visitSingularInt32Field(value: self.adultCount, fieldNumber: 2)
    }
    if self.childCount != 0 {
      try visitor.visitSingularInt32Field(value: self.childCount, fieldNumber: 3)
    }
    if self.infantCount != 0 {
      try visitor.visitSingularInt32Field(value: self.infantCount, fieldNumber: 4)
    }
    if self.journeyType != .unknown {
      try visitor.visitSingularEnumField(value: self.journeyType, fieldNumber: 5)
    }
    if !self.segments.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.segments, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Com_Infinite_Travllr_Airline_AirlineRequest) -> Bool {
    if self.endUserIp != other.endUserIp {return false}
    if self.adultCount != other.adultCount {return false}
    if self.childCount != other.childCount {return false}
    if self.infantCount != other.infantCount {return false}
    if self.journeyType != other.journeyType {return false}
    if self.segments != other.segments {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Com_Infinite_Travllr_Airline_Segment: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Segment"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "origin"),
    2: .same(proto: "destination"),
    3: .same(proto: "departureDate"),
    4: .same(proto: "arrivalDate"),
    5: .same(proto: "cabinClass"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.origin)
      case 2: try decoder.decodeSingularStringField(value: &self.destination)
      case 3: try decoder.decodeSingularStringField(value: &self.departureDate)
      case 4: try decoder.decodeSingularStringField(value: &self.arrivalDate)
      case 5: try decoder.decodeSingularEnumField(value: &self.cabinClass)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.origin.isEmpty {
      try visitor.visitSingularStringField(value: self.origin, fieldNumber: 1)
    }
    if !self.destination.isEmpty {
      try visitor.visitSingularStringField(value: self.destination, fieldNumber: 2)
    }
    if !self.departureDate.isEmpty {
      try visitor.visitSingularStringField(value: self.departureDate, fieldNumber: 3)
    }
    if !self.arrivalDate.isEmpty {
      try visitor.visitSingularStringField(value: self.arrivalDate, fieldNumber: 4)
    }
    if self.cabinClass != .dummy {
      try visitor.visitSingularEnumField(value: self.cabinClass, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Com_Infinite_Travllr_Airline_Segment) -> Bool {
    if self.origin != other.origin {return false}
    if self.destination != other.destination {return false}
    if self.departureDate != other.departureDate {return false}
    if self.arrivalDate != other.arrivalDate {return false}
    if self.cabinClass != other.cabinClass {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Com_Infinite_Travllr_Airline_AirlineResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AirlineResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "traceId"),
    2: .same(proto: "origin"),
    3: .same(proto: "destination"),
    4: .same(proto: "results"),
    5: .same(proto: "isRefundable"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.traceID)
      case 2: try decoder.decodeSingularStringField(value: &self.origin)
      case 3: try decoder.decodeSingularStringField(value: &self.destination)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.results)
      case 5: try decoder.decodeSingularBoolField(value: &self.isRefundable)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.traceID.isEmpty {
      try visitor.visitSingularStringField(value: self.traceID, fieldNumber: 1)
    }
    if !self.origin.isEmpty {
      try visitor.visitSingularStringField(value: self.origin, fieldNumber: 2)
    }
    if !self.destination.isEmpty {
      try visitor.visitSingularStringField(value: self.destination, fieldNumber: 3)
    }
    if !self.results.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.results, fieldNumber: 4)
    }
    if self.isRefundable != false {
      try visitor.visitSingularBoolField(value: self.isRefundable, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Com_Infinite_Travllr_Airline_AirlineResponse) -> Bool {
    if self.traceID != other.traceID {return false}
    if self.origin != other.origin {return false}
    if self.destination != other.destination {return false}
    if self.results != other.results {return false}
    if self.isRefundable != other.isRefundable {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Com_Infinite_Travllr_Airline_Results: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Results"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Com_Infinite_Travllr_Airline_Results) -> Bool {
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
