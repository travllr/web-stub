//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: itinerary.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Foundation
import Dispatch
import SwiftGRPC
import SwiftProtobuf

internal protocol Com_Infinite_Travllr_ItineraryPlannerServicePlanCall: ClientCallUnary {}

fileprivate final class Com_Infinite_Travllr_ItineraryPlannerServicePlanCallBase: ClientCallUnaryBase<Com_Infinite_Travllr_ItineraryRequest, Com_Infinite_Travllr_ItineraryResponse>, Com_Infinite_Travllr_ItineraryPlannerServicePlanCall {
  override class var method: String { return "/com.infinite.travllr.ItineraryPlannerService/Plan" }
}


/// Instantiate Com_Infinite_Travllr_ItineraryPlannerServiceServiceClient, then call methods of this protocol to make API calls.
internal protocol Com_Infinite_Travllr_ItineraryPlannerServiceService: ServiceClient {
  /// Synchronous. Unary.
  func plan(_ request: Com_Infinite_Travllr_ItineraryRequest) throws -> Com_Infinite_Travllr_ItineraryResponse
  /// Asynchronous. Unary.
  func plan(_ request: Com_Infinite_Travllr_ItineraryRequest, completion: @escaping (Com_Infinite_Travllr_ItineraryResponse?, CallResult) -> Void) throws -> Com_Infinite_Travllr_ItineraryPlannerServicePlanCall

}

internal final class Com_Infinite_Travllr_ItineraryPlannerServiceServiceClient: ServiceClientBase, Com_Infinite_Travllr_ItineraryPlannerServiceService {
  /// Synchronous. Unary.
  internal func plan(_ request: Com_Infinite_Travllr_ItineraryRequest) throws -> Com_Infinite_Travllr_ItineraryResponse {
    return try Com_Infinite_Travllr_ItineraryPlannerServicePlanCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  internal func plan(_ request: Com_Infinite_Travllr_ItineraryRequest, completion: @escaping (Com_Infinite_Travllr_ItineraryResponse?, CallResult) -> Void) throws -> Com_Infinite_Travllr_ItineraryPlannerServicePlanCall {
    return try Com_Infinite_Travllr_ItineraryPlannerServicePlanCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

}

