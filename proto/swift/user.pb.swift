// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: user.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum Com_Infinite_Travllr_ItineraryStatus: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case saved // = 0
  case booked // = 1
  case UNRECOGNIZED(Int)

  init() {
    self = .saved
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .saved
    case 1: self = .booked
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .saved: return 0
    case .booked: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

}

struct Com_Infinite_Travllr_UserDetail {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var name: String = String()

  var email: String = String()

  var mobile: String = String()

  var password: String = String()

  var addressLine1: String = String()

  var addressLine2: String = String()

  var addressLine3: String = String()

  var state: String = String()

  var pinCode: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Com_Infinite_Travllr_UserContact {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var salutation: String = String()

  var surName: String = String()

  var givenName: String = String()

  var passportNumber: String = String()

  var dateOfBirth: String = String()

  var passportExpiryDate: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Com_Infinite_Travllr_ItineraryDetails {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var route: Com_Infinite_Travllr_CityRouteInfo {
    get {return _storage._route ?? Com_Infinite_Travllr_CityRouteInfo()}
    set {_uniqueStorage()._route = newValue}
  }
  /// Returns true if `route` has been explicitly set.
  var hasRoute: Bool {return _storage._route != nil}
  /// Clears the value of `route`. Subsequent reads from it will return its default value.
  mutating func clearRoute() {_storage._route = nil}

  var dayPlan: [Com_Infinite_Travllr_DayPlan] {
    get {return _storage._dayPlan}
    set {_uniqueStorage()._dayPlan = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Com_Infinite_Travllr_UserItinerary {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var title: String = String()

  var createAt: String = String()

  var updatedAt: String = String()

  var status: Com_Infinite_Travllr_ItineraryStatus = .saved

  var departDate: String = String()

  var arrivalDate: String = String()

  var duration: Int32 = 0

  var departFrom: String = String()

  var noOfAdults: Int32 = 0

  var noOfChild: Int32 = 0

  var childAges: [Int32] = []

  var itinerary: [Com_Infinite_Travllr_ItineraryDetails] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Com_Infinite_Travllr_UserDetailInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var name: String = String()

  var email: String = String()

  var mobile: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Com_Infinite_Travllr_UserList {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var users: [Com_Infinite_Travllr_UserDetailInfo] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Com_Infinite_Travllr_UserDetailRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Com_Infinite_Travllr_UserDetailResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var userDetail: Com_Infinite_Travllr_UserDetail {
    get {return _storage._userDetail ?? Com_Infinite_Travllr_UserDetail()}
    set {_uniqueStorage()._userDetail = newValue}
  }
  /// Returns true if `userDetail` has been explicitly set.
  var hasUserDetail: Bool {return _storage._userDetail != nil}
  /// Clears the value of `userDetail`. Subsequent reads from it will return its default value.
  mutating func clearUserDetail() {_storage._userDetail = nil}

  var userContact: [Com_Infinite_Travllr_UserContact] {
    get {return _storage._userContact}
    set {_uniqueStorage()._userContact = newValue}
  }

  var userItinerary: [Com_Infinite_Travllr_UserItinerary] {
    get {return _storage._userItinerary}
    set {_uniqueStorage()._userItinerary = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "com.infinite.travllr"

extension Com_Infinite_Travllr_ItineraryStatus: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "SAVED"),
    1: .same(proto: "BOOKED"),
  ]
}

extension Com_Infinite_Travllr_UserDetail: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UserDetail"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .same(proto: "name"),
    3: .same(proto: "email"),
    4: .same(proto: "mobile"),
    5: .same(proto: "password"),
    6: .same(proto: "addressLine1"),
    7: .same(proto: "addressLine2"),
    8: .same(proto: "addressLine3"),
    9: .same(proto: "state"),
    10: .same(proto: "pinCode"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 2: try decoder.decodeSingularStringField(value: &self.name)
      case 3: try decoder.decodeSingularStringField(value: &self.email)
      case 4: try decoder.decodeSingularStringField(value: &self.mobile)
      case 5: try decoder.decodeSingularStringField(value: &self.password)
      case 6: try decoder.decodeSingularStringField(value: &self.addressLine1)
      case 7: try decoder.decodeSingularStringField(value: &self.addressLine2)
      case 8: try decoder.decodeSingularStringField(value: &self.addressLine3)
      case 9: try decoder.decodeSingularStringField(value: &self.state)
      case 10: try decoder.decodeSingularStringField(value: &self.pinCode)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if !self.email.isEmpty {
      try visitor.visitSingularStringField(value: self.email, fieldNumber: 3)
    }
    if !self.mobile.isEmpty {
      try visitor.visitSingularStringField(value: self.mobile, fieldNumber: 4)
    }
    if !self.password.isEmpty {
      try visitor.visitSingularStringField(value: self.password, fieldNumber: 5)
    }
    if !self.addressLine1.isEmpty {
      try visitor.visitSingularStringField(value: self.addressLine1, fieldNumber: 6)
    }
    if !self.addressLine2.isEmpty {
      try visitor.visitSingularStringField(value: self.addressLine2, fieldNumber: 7)
    }
    if !self.addressLine3.isEmpty {
      try visitor.visitSingularStringField(value: self.addressLine3, fieldNumber: 8)
    }
    if !self.state.isEmpty {
      try visitor.visitSingularStringField(value: self.state, fieldNumber: 9)
    }
    if !self.pinCode.isEmpty {
      try visitor.visitSingularStringField(value: self.pinCode, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Com_Infinite_Travllr_UserDetail) -> Bool {
    if self.name != other.name {return false}
    if self.email != other.email {return false}
    if self.mobile != other.mobile {return false}
    if self.password != other.password {return false}
    if self.addressLine1 != other.addressLine1 {return false}
    if self.addressLine2 != other.addressLine2 {return false}
    if self.addressLine3 != other.addressLine3 {return false}
    if self.state != other.state {return false}
    if self.pinCode != other.pinCode {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Com_Infinite_Travllr_UserContact: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UserContact"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "salutation"),
    2: .same(proto: "surName"),
    3: .same(proto: "givenName"),
    4: .same(proto: "passportNumber"),
    5: .same(proto: "dateOfBirth"),
    6: .same(proto: "passportExpiryDate"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.salutation)
      case 2: try decoder.decodeSingularStringField(value: &self.surName)
      case 3: try decoder.decodeSingularStringField(value: &self.givenName)
      case 4: try decoder.decodeSingularStringField(value: &self.passportNumber)
      case 5: try decoder.decodeSingularStringField(value: &self.dateOfBirth)
      case 6: try decoder.decodeSingularStringField(value: &self.passportExpiryDate)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.salutation.isEmpty {
      try visitor.visitSingularStringField(value: self.salutation, fieldNumber: 1)
    }
    if !self.surName.isEmpty {
      try visitor.visitSingularStringField(value: self.surName, fieldNumber: 2)
    }
    if !self.givenName.isEmpty {
      try visitor.visitSingularStringField(value: self.givenName, fieldNumber: 3)
    }
    if !self.passportNumber.isEmpty {
      try visitor.visitSingularStringField(value: self.passportNumber, fieldNumber: 4)
    }
    if !self.dateOfBirth.isEmpty {
      try visitor.visitSingularStringField(value: self.dateOfBirth, fieldNumber: 5)
    }
    if !self.passportExpiryDate.isEmpty {
      try visitor.visitSingularStringField(value: self.passportExpiryDate, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Com_Infinite_Travllr_UserContact) -> Bool {
    if self.salutation != other.salutation {return false}
    if self.surName != other.surName {return false}
    if self.givenName != other.givenName {return false}
    if self.passportNumber != other.passportNumber {return false}
    if self.dateOfBirth != other.dateOfBirth {return false}
    if self.passportExpiryDate != other.passportExpiryDate {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Com_Infinite_Travllr_ItineraryDetails: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ItineraryDetails"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "route"),
    2: .same(proto: "dayPlan"),
  ]

  fileprivate class _StorageClass {
    var _route: Com_Infinite_Travllr_CityRouteInfo? = nil
    var _dayPlan: [Com_Infinite_Travllr_DayPlan] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _route = source._route
      _dayPlan = source._dayPlan
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._route)
        case 2: try decoder.decodeRepeatedMessageField(value: &_storage._dayPlan)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._route {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._dayPlan.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._dayPlan, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Com_Infinite_Travllr_ItineraryDetails) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._route != other_storage._route {return false}
        if _storage._dayPlan != other_storage._dayPlan {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Com_Infinite_Travllr_UserItinerary: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UserItinerary"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "title"),
    2: .same(proto: "createAt"),
    3: .same(proto: "updatedAt"),
    4: .same(proto: "status"),
    5: .same(proto: "departDate"),
    6: .same(proto: "arrivalDate"),
    7: .same(proto: "duration"),
    8: .same(proto: "departFrom"),
    9: .same(proto: "noOfAdults"),
    10: .same(proto: "noOfChild"),
    11: .same(proto: "childAges"),
    12: .same(proto: "itinerary"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.title)
      case 2: try decoder.decodeSingularStringField(value: &self.createAt)
      case 3: try decoder.decodeSingularStringField(value: &self.updatedAt)
      case 4: try decoder.decodeSingularEnumField(value: &self.status)
      case 5: try decoder.decodeSingularStringField(value: &self.departDate)
      case 6: try decoder.decodeSingularStringField(value: &self.arrivalDate)
      case 7: try decoder.decodeSingularInt32Field(value: &self.duration)
      case 8: try decoder.decodeSingularStringField(value: &self.departFrom)
      case 9: try decoder.decodeSingularInt32Field(value: &self.noOfAdults)
      case 10: try decoder.decodeSingularInt32Field(value: &self.noOfChild)
      case 11: try decoder.decodeRepeatedInt32Field(value: &self.childAges)
      case 12: try decoder.decodeRepeatedMessageField(value: &self.itinerary)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 1)
    }
    if !self.createAt.isEmpty {
      try visitor.visitSingularStringField(value: self.createAt, fieldNumber: 2)
    }
    if !self.updatedAt.isEmpty {
      try visitor.visitSingularStringField(value: self.updatedAt, fieldNumber: 3)
    }
    if self.status != .saved {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 4)
    }
    if !self.departDate.isEmpty {
      try visitor.visitSingularStringField(value: self.departDate, fieldNumber: 5)
    }
    if !self.arrivalDate.isEmpty {
      try visitor.visitSingularStringField(value: self.arrivalDate, fieldNumber: 6)
    }
    if self.duration != 0 {
      try visitor.visitSingularInt32Field(value: self.duration, fieldNumber: 7)
    }
    if !self.departFrom.isEmpty {
      try visitor.visitSingularStringField(value: self.departFrom, fieldNumber: 8)
    }
    if self.noOfAdults != 0 {
      try visitor.visitSingularInt32Field(value: self.noOfAdults, fieldNumber: 9)
    }
    if self.noOfChild != 0 {
      try visitor.visitSingularInt32Field(value: self.noOfChild, fieldNumber: 10)
    }
    if !self.childAges.isEmpty {
      try visitor.visitPackedInt32Field(value: self.childAges, fieldNumber: 11)
    }
    if !self.itinerary.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.itinerary, fieldNumber: 12)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Com_Infinite_Travllr_UserItinerary) -> Bool {
    if self.title != other.title {return false}
    if self.createAt != other.createAt {return false}
    if self.updatedAt != other.updatedAt {return false}
    if self.status != other.status {return false}
    if self.departDate != other.departDate {return false}
    if self.arrivalDate != other.arrivalDate {return false}
    if self.duration != other.duration {return false}
    if self.departFrom != other.departFrom {return false}
    if self.noOfAdults != other.noOfAdults {return false}
    if self.noOfChild != other.noOfChild {return false}
    if self.childAges != other.childAges {return false}
    if self.itinerary != other.itinerary {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Com_Infinite_Travllr_UserDetailInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UserDetailInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "name"),
    3: .same(proto: "email"),
    4: .same(proto: "mobile"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.name)
      case 3: try decoder.decodeSingularStringField(value: &self.email)
      case 4: try decoder.decodeSingularStringField(value: &self.mobile)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if !self.email.isEmpty {
      try visitor.visitSingularStringField(value: self.email, fieldNumber: 3)
    }
    if !self.mobile.isEmpty {
      try visitor.visitSingularStringField(value: self.mobile, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Com_Infinite_Travllr_UserDetailInfo) -> Bool {
    if self.id != other.id {return false}
    if self.name != other.name {return false}
    if self.email != other.email {return false}
    if self.mobile != other.mobile {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Com_Infinite_Travllr_UserList: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UserList"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "users"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.users)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.users.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.users, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Com_Infinite_Travllr_UserList) -> Bool {
    if self.users != other.users {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Com_Infinite_Travllr_UserDetailRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UserDetailRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.id)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.id.isEmpty {
      try visitor.visitSingularStringField(value: self.id, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Com_Infinite_Travllr_UserDetailRequest) -> Bool {
    if self.id != other.id {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Com_Infinite_Travllr_UserDetailResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UserDetailResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "userDetail"),
    2: .same(proto: "userContact"),
    3: .same(proto: "userItinerary"),
  ]

  fileprivate class _StorageClass {
    var _userDetail: Com_Infinite_Travllr_UserDetail? = nil
    var _userContact: [Com_Infinite_Travllr_UserContact] = []
    var _userItinerary: [Com_Infinite_Travllr_UserItinerary] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _userDetail = source._userDetail
      _userContact = source._userContact
      _userItinerary = source._userItinerary
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._userDetail)
        case 2: try decoder.decodeRepeatedMessageField(value: &_storage._userContact)
        case 3: try decoder.decodeRepeatedMessageField(value: &_storage._userItinerary)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._userDetail {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._userContact.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._userContact, fieldNumber: 2)
      }
      if !_storage._userItinerary.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._userItinerary, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Com_Infinite_Travllr_UserDetailResponse) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._userDetail != other_storage._userDetail {return false}
        if _storage._userContact != other_storage._userContact {return false}
        if _storage._userItinerary != other_storage._userItinerary {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
