// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: hotel.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Com_Infinite_Travllr_Hotel_RoomGuest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var noOfAdults: Int32 = 0

  var noOfChild: Int32 = 0

  var childAge: [Int32] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Com_Infinite_Travllr_Hotel_HotelRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var checkInDate: String {
    get {return _storage._checkInDate}
    set {_uniqueStorage()._checkInDate = newValue}
  }

  var noOfNights: Int32 {
    get {return _storage._noOfNights}
    set {_uniqueStorage()._noOfNights = newValue}
  }

  var countryCode: String {
    get {return _storage._countryCode}
    set {_uniqueStorage()._countryCode = newValue}
  }

  var cityID: String {
    get {return _storage._cityID}
    set {_uniqueStorage()._cityID = newValue}
  }

  var resultCount: Int32 {
    get {return _storage._resultCount}
    set {_uniqueStorage()._resultCount = newValue}
  }

  var preferredCurrency: String {
    get {return _storage._preferredCurrency}
    set {_uniqueStorage()._preferredCurrency = newValue}
  }

  var guestNationality: String {
    get {return _storage._guestNationality}
    set {_uniqueStorage()._guestNationality = newValue}
  }

  var noOfRooms: Int32 {
    get {return _storage._noOfRooms}
    set {_uniqueStorage()._noOfRooms = newValue}
  }

  var roomGuests: Com_Infinite_Travllr_Hotel_RoomGuest {
    get {return _storage._roomGuests ?? Com_Infinite_Travllr_Hotel_RoomGuest()}
    set {_uniqueStorage()._roomGuests = newValue}
  }
  /// Returns true if `roomGuests` has been explicitly set.
  var hasRoomGuests: Bool {return _storage._roomGuests != nil}
  /// Clears the value of `roomGuests`. Subsequent reads from it will return its default value.
  mutating func clearRoomGuests() {_storage._roomGuests = nil}

  var preferredHotel: String {
    get {return _storage._preferredHotel}
    set {_uniqueStorage()._preferredHotel = newValue}
  }

  var maxRating: Int32 {
    get {return _storage._maxRating}
    set {_uniqueStorage()._maxRating = newValue}
  }

  var minRating: Int32 {
    get {return _storage._minRating}
    set {_uniqueStorage()._minRating = newValue}
  }

  var reviewScore: Int32 {
    get {return _storage._reviewScore}
    set {_uniqueStorage()._reviewScore = newValue}
  }

  var isNearBySearchAllowed: Bool {
    get {return _storage._isNearBySearchAllowed}
    set {_uniqueStorage()._isNearBySearchAllowed = newValue}
  }

  var endUserIp: String {
    get {return _storage._endUserIp}
    set {_uniqueStorage()._endUserIp = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Com_Infinite_Travllr_Hotel_HotelPriceGst {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var cGstamount: Double = 0

  var cGstrate: Double = 0

  var cessAmount: Double = 0

  var cessRate: Double = 0

  var iGstamount: Double = 0

  var iGstrate: Double = 0

  var sGstamount: Double = 0

  var sGstrate: Double = 0

  var taxableAmount: Double = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Com_Infinite_Travllr_Hotel_HotelPrice {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var currencyCode: String {
    get {return _storage._currencyCode}
    set {_uniqueStorage()._currencyCode = newValue}
  }

  var roomPrice: Double {
    get {return _storage._roomPrice}
    set {_uniqueStorage()._roomPrice = newValue}
  }

  var tax: Double {
    get {return _storage._tax}
    set {_uniqueStorage()._tax = newValue}
  }

  var extraGuestCharge: Double {
    get {return _storage._extraGuestCharge}
    set {_uniqueStorage()._extraGuestCharge = newValue}
  }

  var childCharge: Double {
    get {return _storage._childCharge}
    set {_uniqueStorage()._childCharge = newValue}
  }

  var otherCharges: Double {
    get {return _storage._otherCharges}
    set {_uniqueStorage()._otherCharges = newValue}
  }

  var discount: Double {
    get {return _storage._discount}
    set {_uniqueStorage()._discount = newValue}
  }

  var publishedPrice: Double {
    get {return _storage._publishedPrice}
    set {_uniqueStorage()._publishedPrice = newValue}
  }

  var publishedPriceRoundedOff: Double {
    get {return _storage._publishedPriceRoundedOff}
    set {_uniqueStorage()._publishedPriceRoundedOff = newValue}
  }

  var offeredPrice: Double {
    get {return _storage._offeredPrice}
    set {_uniqueStorage()._offeredPrice = newValue}
  }

  var offeredPriceRoundedOff: Double {
    get {return _storage._offeredPriceRoundedOff}
    set {_uniqueStorage()._offeredPriceRoundedOff = newValue}
  }

  var agentCommission: Double {
    get {return _storage._agentCommission}
    set {_uniqueStorage()._agentCommission = newValue}
  }

  var agentMarkUp: Double {
    get {return _storage._agentMarkUp}
    set {_uniqueStorage()._agentMarkUp = newValue}
  }

  var serviceTax: Double {
    get {return _storage._serviceTax}
    set {_uniqueStorage()._serviceTax = newValue}
  }

  var tds: Double {
    get {return _storage._tds}
    set {_uniqueStorage()._tds = newValue}
  }

  var serviceCharge: Double {
    get {return _storage._serviceCharge}
    set {_uniqueStorage()._serviceCharge = newValue}
  }

  var totalGstamount: Double {
    get {return _storage._totalGstamount}
    set {_uniqueStorage()._totalGstamount = newValue}
  }

  var gst: Com_Infinite_Travllr_Hotel_HotelPriceGst {
    get {return _storage._gst ?? Com_Infinite_Travllr_Hotel_HotelPriceGst()}
    set {_uniqueStorage()._gst = newValue}
  }
  /// Returns true if `gst` has been explicitly set.
  var hasGst: Bool {return _storage._gst != nil}
  /// Clears the value of `gst`. Subsequent reads from it will return its default value.
  mutating func clearGst() {_storage._gst = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Com_Infinite_Travllr_Hotel_HotelResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var hotelCode: String {
    get {return _storage._hotelCode}
    set {_uniqueStorage()._hotelCode = newValue}
  }

  var hotelName: String {
    get {return _storage._hotelName}
    set {_uniqueStorage()._hotelName = newValue}
  }

  var hotelCategory: String {
    get {return _storage._hotelCategory}
    set {_uniqueStorage()._hotelCategory = newValue}
  }

  var starRating: Int32 {
    get {return _storage._starRating}
    set {_uniqueStorage()._starRating = newValue}
  }

  var hotelDescription: String {
    get {return _storage._hotelDescription}
    set {_uniqueStorage()._hotelDescription = newValue}
  }

  var price: Com_Infinite_Travllr_Hotel_HotelPrice {
    get {return _storage._price ?? Com_Infinite_Travllr_Hotel_HotelPrice()}
    set {_uniqueStorage()._price = newValue}
  }
  /// Returns true if `price` has been explicitly set.
  var hasPrice: Bool {return _storage._price != nil}
  /// Clears the value of `price`. Subsequent reads from it will return its default value.
  mutating func clearPrice() {_storage._price = nil}

  var hotelPicture: String {
    get {return _storage._hotelPicture}
    set {_uniqueStorage()._hotelPicture = newValue}
  }

  var hotelAddress: String {
    get {return _storage._hotelAddress}
    set {_uniqueStorage()._hotelAddress = newValue}
  }

  var hotelContactNo: String {
    get {return _storage._hotelContactNo}
    set {_uniqueStorage()._hotelContactNo = newValue}
  }

  var latitude: String {
    get {return _storage._latitude}
    set {_uniqueStorage()._latitude = newValue}
  }

  var longitude: String {
    get {return _storage._longitude}
    set {_uniqueStorage()._longitude = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Com_Infinite_Travllr_Hotel_HotelResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var traceID: String {
    get {return _storage._traceID}
    set {_uniqueStorage()._traceID = newValue}
  }

  var checkInDate: String {
    get {return _storage._checkInDate}
    set {_uniqueStorage()._checkInDate = newValue}
  }

  var checkOutDate: String {
    get {return _storage._checkOutDate}
    set {_uniqueStorage()._checkOutDate = newValue}
  }

  var preferredCurrency: String {
    get {return _storage._preferredCurrency}
    set {_uniqueStorage()._preferredCurrency = newValue}
  }

  var noOfRooms: Int32 {
    get {return _storage._noOfRooms}
    set {_uniqueStorage()._noOfRooms = newValue}
  }

  var roomGuests: Com_Infinite_Travllr_Hotel_RoomGuest {
    get {return _storage._roomGuests ?? Com_Infinite_Travllr_Hotel_RoomGuest()}
    set {_uniqueStorage()._roomGuests = newValue}
  }
  /// Returns true if `roomGuests` has been explicitly set.
  var hasRoomGuests: Bool {return _storage._roomGuests != nil}
  /// Clears the value of `roomGuests`. Subsequent reads from it will return its default value.
  mutating func clearRoomGuests() {_storage._roomGuests = nil}

  var hotelResults: [Com_Infinite_Travllr_Hotel_HotelResult] {
    get {return _storage._hotelResults}
    set {_uniqueStorage()._hotelResults = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "com.infinite.travllr.hotel"

extension Com_Infinite_Travllr_Hotel_RoomGuest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RoomGuest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "noOfAdults"),
    2: .same(proto: "noOfChild"),
    3: .same(proto: "childAge"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.noOfAdults)
      case 2: try decoder.decodeSingularInt32Field(value: &self.noOfChild)
      case 3: try decoder.decodeRepeatedInt32Field(value: &self.childAge)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.noOfAdults != 0 {
      try visitor.visitSingularInt32Field(value: self.noOfAdults, fieldNumber: 1)
    }
    if self.noOfChild != 0 {
      try visitor.visitSingularInt32Field(value: self.noOfChild, fieldNumber: 2)
    }
    if !self.childAge.isEmpty {
      try visitor.visitPackedInt32Field(value: self.childAge, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Com_Infinite_Travllr_Hotel_RoomGuest) -> Bool {
    if self.noOfAdults != other.noOfAdults {return false}
    if self.noOfChild != other.noOfChild {return false}
    if self.childAge != other.childAge {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Com_Infinite_Travllr_Hotel_HotelRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".HotelRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "checkInDate"),
    2: .same(proto: "noOfNights"),
    3: .same(proto: "countryCode"),
    4: .same(proto: "cityId"),
    5: .same(proto: "resultCount"),
    6: .same(proto: "preferredCurrency"),
    7: .same(proto: "guestNationality"),
    8: .same(proto: "noOfRooms"),
    9: .same(proto: "roomGuests"),
    10: .same(proto: "preferredHotel"),
    11: .same(proto: "maxRating"),
    12: .same(proto: "MinRating"),
    13: .same(proto: "reviewScore"),
    14: .same(proto: "isNearBySearchAllowed"),
    15: .same(proto: "endUserIp"),
  ]

  fileprivate class _StorageClass {
    var _checkInDate: String = String()
    var _noOfNights: Int32 = 0
    var _countryCode: String = String()
    var _cityID: String = String()
    var _resultCount: Int32 = 0
    var _preferredCurrency: String = String()
    var _guestNationality: String = String()
    var _noOfRooms: Int32 = 0
    var _roomGuests: Com_Infinite_Travllr_Hotel_RoomGuest? = nil
    var _preferredHotel: String = String()
    var _maxRating: Int32 = 0
    var _minRating: Int32 = 0
    var _reviewScore: Int32 = 0
    var _isNearBySearchAllowed: Bool = false
    var _endUserIp: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _checkInDate = source._checkInDate
      _noOfNights = source._noOfNights
      _countryCode = source._countryCode
      _cityID = source._cityID
      _resultCount = source._resultCount
      _preferredCurrency = source._preferredCurrency
      _guestNationality = source._guestNationality
      _noOfRooms = source._noOfRooms
      _roomGuests = source._roomGuests
      _preferredHotel = source._preferredHotel
      _maxRating = source._maxRating
      _minRating = source._minRating
      _reviewScore = source._reviewScore
      _isNearBySearchAllowed = source._isNearBySearchAllowed
      _endUserIp = source._endUserIp
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._checkInDate)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._noOfNights)
        case 3: try decoder.decodeSingularStringField(value: &_storage._countryCode)
        case 4: try decoder.decodeSingularStringField(value: &_storage._cityID)
        case 5: try decoder.decodeSingularInt32Field(value: &_storage._resultCount)
        case 6: try decoder.decodeSingularStringField(value: &_storage._preferredCurrency)
        case 7: try decoder.decodeSingularStringField(value: &_storage._guestNationality)
        case 8: try decoder.decodeSingularInt32Field(value: &_storage._noOfRooms)
        case 9: try decoder.decodeSingularMessageField(value: &_storage._roomGuests)
        case 10: try decoder.decodeSingularStringField(value: &_storage._preferredHotel)
        case 11: try decoder.decodeSingularInt32Field(value: &_storage._maxRating)
        case 12: try decoder.decodeSingularInt32Field(value: &_storage._minRating)
        case 13: try decoder.decodeSingularInt32Field(value: &_storage._reviewScore)
        case 14: try decoder.decodeSingularBoolField(value: &_storage._isNearBySearchAllowed)
        case 15: try decoder.decodeSingularStringField(value: &_storage._endUserIp)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._checkInDate.isEmpty {
        try visitor.visitSingularStringField(value: _storage._checkInDate, fieldNumber: 1)
      }
      if _storage._noOfNights != 0 {
        try visitor.visitSingularInt32Field(value: _storage._noOfNights, fieldNumber: 2)
      }
      if !_storage._countryCode.isEmpty {
        try visitor.visitSingularStringField(value: _storage._countryCode, fieldNumber: 3)
      }
      if !_storage._cityID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._cityID, fieldNumber: 4)
      }
      if _storage._resultCount != 0 {
        try visitor.visitSingularInt32Field(value: _storage._resultCount, fieldNumber: 5)
      }
      if !_storage._preferredCurrency.isEmpty {
        try visitor.visitSingularStringField(value: _storage._preferredCurrency, fieldNumber: 6)
      }
      if !_storage._guestNationality.isEmpty {
        try visitor.visitSingularStringField(value: _storage._guestNationality, fieldNumber: 7)
      }
      if _storage._noOfRooms != 0 {
        try visitor.visitSingularInt32Field(value: _storage._noOfRooms, fieldNumber: 8)
      }
      if let v = _storage._roomGuests {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      }
      if !_storage._preferredHotel.isEmpty {
        try visitor.visitSingularStringField(value: _storage._preferredHotel, fieldNumber: 10)
      }
      if _storage._maxRating != 0 {
        try visitor.visitSingularInt32Field(value: _storage._maxRating, fieldNumber: 11)
      }
      if _storage._minRating != 0 {
        try visitor.visitSingularInt32Field(value: _storage._minRating, fieldNumber: 12)
      }
      if _storage._reviewScore != 0 {
        try visitor.visitSingularInt32Field(value: _storage._reviewScore, fieldNumber: 13)
      }
      if _storage._isNearBySearchAllowed != false {
        try visitor.visitSingularBoolField(value: _storage._isNearBySearchAllowed, fieldNumber: 14)
      }
      if !_storage._endUserIp.isEmpty {
        try visitor.visitSingularStringField(value: _storage._endUserIp, fieldNumber: 15)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Com_Infinite_Travllr_Hotel_HotelRequest) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._checkInDate != other_storage._checkInDate {return false}
        if _storage._noOfNights != other_storage._noOfNights {return false}
        if _storage._countryCode != other_storage._countryCode {return false}
        if _storage._cityID != other_storage._cityID {return false}
        if _storage._resultCount != other_storage._resultCount {return false}
        if _storage._preferredCurrency != other_storage._preferredCurrency {return false}
        if _storage._guestNationality != other_storage._guestNationality {return false}
        if _storage._noOfRooms != other_storage._noOfRooms {return false}
        if _storage._roomGuests != other_storage._roomGuests {return false}
        if _storage._preferredHotel != other_storage._preferredHotel {return false}
        if _storage._maxRating != other_storage._maxRating {return false}
        if _storage._minRating != other_storage._minRating {return false}
        if _storage._reviewScore != other_storage._reviewScore {return false}
        if _storage._isNearBySearchAllowed != other_storage._isNearBySearchAllowed {return false}
        if _storage._endUserIp != other_storage._endUserIp {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Com_Infinite_Travllr_Hotel_HotelPriceGst: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".HotelPriceGst"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "cGSTAmount"),
    2: .same(proto: "cGSTRate"),
    3: .same(proto: "cessAmount"),
    4: .same(proto: "cessRate"),
    5: .same(proto: "iGSTAmount"),
    6: .same(proto: "iGSTRate"),
    7: .same(proto: "sGSTAmount"),
    8: .same(proto: "sGSTRate"),
    9: .same(proto: "taxableAmount"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularDoubleField(value: &self.cGstamount)
      case 2: try decoder.decodeSingularDoubleField(value: &self.cGstrate)
      case 3: try decoder.decodeSingularDoubleField(value: &self.cessAmount)
      case 4: try decoder.decodeSingularDoubleField(value: &self.cessRate)
      case 5: try decoder.decodeSingularDoubleField(value: &self.iGstamount)
      case 6: try decoder.decodeSingularDoubleField(value: &self.iGstrate)
      case 7: try decoder.decodeSingularDoubleField(value: &self.sGstamount)
      case 8: try decoder.decodeSingularDoubleField(value: &self.sGstrate)
      case 9: try decoder.decodeSingularDoubleField(value: &self.taxableAmount)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.cGstamount != 0 {
      try visitor.visitSingularDoubleField(value: self.cGstamount, fieldNumber: 1)
    }
    if self.cGstrate != 0 {
      try visitor.visitSingularDoubleField(value: self.cGstrate, fieldNumber: 2)
    }
    if self.cessAmount != 0 {
      try visitor.visitSingularDoubleField(value: self.cessAmount, fieldNumber: 3)
    }
    if self.cessRate != 0 {
      try visitor.visitSingularDoubleField(value: self.cessRate, fieldNumber: 4)
    }
    if self.iGstamount != 0 {
      try visitor.visitSingularDoubleField(value: self.iGstamount, fieldNumber: 5)
    }
    if self.iGstrate != 0 {
      try visitor.visitSingularDoubleField(value: self.iGstrate, fieldNumber: 6)
    }
    if self.sGstamount != 0 {
      try visitor.visitSingularDoubleField(value: self.sGstamount, fieldNumber: 7)
    }
    if self.sGstrate != 0 {
      try visitor.visitSingularDoubleField(value: self.sGstrate, fieldNumber: 8)
    }
    if self.taxableAmount != 0 {
      try visitor.visitSingularDoubleField(value: self.taxableAmount, fieldNumber: 9)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Com_Infinite_Travllr_Hotel_HotelPriceGst) -> Bool {
    if self.cGstamount != other.cGstamount {return false}
    if self.cGstrate != other.cGstrate {return false}
    if self.cessAmount != other.cessAmount {return false}
    if self.cessRate != other.cessRate {return false}
    if self.iGstamount != other.iGstamount {return false}
    if self.iGstrate != other.iGstrate {return false}
    if self.sGstamount != other.sGstamount {return false}
    if self.sGstrate != other.sGstrate {return false}
    if self.taxableAmount != other.taxableAmount {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Com_Infinite_Travllr_Hotel_HotelPrice: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".HotelPrice"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "currencyCode"),
    2: .same(proto: "roomPrice"),
    3: .same(proto: "tax"),
    4: .same(proto: "extraGuestCharge"),
    5: .same(proto: "childCharge"),
    6: .same(proto: "otherCharges"),
    7: .same(proto: "discount"),
    8: .same(proto: "publishedPrice"),
    9: .same(proto: "publishedPriceRoundedOff"),
    10: .same(proto: "offeredPrice"),
    11: .same(proto: "offeredPriceRoundedOff"),
    12: .same(proto: "agentCommission"),
    13: .same(proto: "agentMarkUp"),
    14: .same(proto: "serviceTax"),
    15: .same(proto: "tds"),
    16: .same(proto: "serviceCharge"),
    17: .same(proto: "totalGSTAmount"),
    18: .same(proto: "gst"),
  ]

  fileprivate class _StorageClass {
    var _currencyCode: String = String()
    var _roomPrice: Double = 0
    var _tax: Double = 0
    var _extraGuestCharge: Double = 0
    var _childCharge: Double = 0
    var _otherCharges: Double = 0
    var _discount: Double = 0
    var _publishedPrice: Double = 0
    var _publishedPriceRoundedOff: Double = 0
    var _offeredPrice: Double = 0
    var _offeredPriceRoundedOff: Double = 0
    var _agentCommission: Double = 0
    var _agentMarkUp: Double = 0
    var _serviceTax: Double = 0
    var _tds: Double = 0
    var _serviceCharge: Double = 0
    var _totalGstamount: Double = 0
    var _gst: Com_Infinite_Travllr_Hotel_HotelPriceGst? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _currencyCode = source._currencyCode
      _roomPrice = source._roomPrice
      _tax = source._tax
      _extraGuestCharge = source._extraGuestCharge
      _childCharge = source._childCharge
      _otherCharges = source._otherCharges
      _discount = source._discount
      _publishedPrice = source._publishedPrice
      _publishedPriceRoundedOff = source._publishedPriceRoundedOff
      _offeredPrice = source._offeredPrice
      _offeredPriceRoundedOff = source._offeredPriceRoundedOff
      _agentCommission = source._agentCommission
      _agentMarkUp = source._agentMarkUp
      _serviceTax = source._serviceTax
      _tds = source._tds
      _serviceCharge = source._serviceCharge
      _totalGstamount = source._totalGstamount
      _gst = source._gst
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._currencyCode)
        case 2: try decoder.decodeSingularDoubleField(value: &_storage._roomPrice)
        case 3: try decoder.decodeSingularDoubleField(value: &_storage._tax)
        case 4: try decoder.decodeSingularDoubleField(value: &_storage._extraGuestCharge)
        case 5: try decoder.decodeSingularDoubleField(value: &_storage._childCharge)
        case 6: try decoder.decodeSingularDoubleField(value: &_storage._otherCharges)
        case 7: try decoder.decodeSingularDoubleField(value: &_storage._discount)
        case 8: try decoder.decodeSingularDoubleField(value: &_storage._publishedPrice)
        case 9: try decoder.decodeSingularDoubleField(value: &_storage._publishedPriceRoundedOff)
        case 10: try decoder.decodeSingularDoubleField(value: &_storage._offeredPrice)
        case 11: try decoder.decodeSingularDoubleField(value: &_storage._offeredPriceRoundedOff)
        case 12: try decoder.decodeSingularDoubleField(value: &_storage._agentCommission)
        case 13: try decoder.decodeSingularDoubleField(value: &_storage._agentMarkUp)
        case 14: try decoder.decodeSingularDoubleField(value: &_storage._serviceTax)
        case 15: try decoder.decodeSingularDoubleField(value: &_storage._tds)
        case 16: try decoder.decodeSingularDoubleField(value: &_storage._serviceCharge)
        case 17: try decoder.decodeSingularDoubleField(value: &_storage._totalGstamount)
        case 18: try decoder.decodeSingularMessageField(value: &_storage._gst)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._currencyCode.isEmpty {
        try visitor.visitSingularStringField(value: _storage._currencyCode, fieldNumber: 1)
      }
      if _storage._roomPrice != 0 {
        try visitor.visitSingularDoubleField(value: _storage._roomPrice, fieldNumber: 2)
      }
      if _storage._tax != 0 {
        try visitor.visitSingularDoubleField(value: _storage._tax, fieldNumber: 3)
      }
      if _storage._extraGuestCharge != 0 {
        try visitor.visitSingularDoubleField(value: _storage._extraGuestCharge, fieldNumber: 4)
      }
      if _storage._childCharge != 0 {
        try visitor.visitSingularDoubleField(value: _storage._childCharge, fieldNumber: 5)
      }
      if _storage._otherCharges != 0 {
        try visitor.visitSingularDoubleField(value: _storage._otherCharges, fieldNumber: 6)
      }
      if _storage._discount != 0 {
        try visitor.visitSingularDoubleField(value: _storage._discount, fieldNumber: 7)
      }
      if _storage._publishedPrice != 0 {
        try visitor.visitSingularDoubleField(value: _storage._publishedPrice, fieldNumber: 8)
      }
      if _storage._publishedPriceRoundedOff != 0 {
        try visitor.visitSingularDoubleField(value: _storage._publishedPriceRoundedOff, fieldNumber: 9)
      }
      if _storage._offeredPrice != 0 {
        try visitor.visitSingularDoubleField(value: _storage._offeredPrice, fieldNumber: 10)
      }
      if _storage._offeredPriceRoundedOff != 0 {
        try visitor.visitSingularDoubleField(value: _storage._offeredPriceRoundedOff, fieldNumber: 11)
      }
      if _storage._agentCommission != 0 {
        try visitor.visitSingularDoubleField(value: _storage._agentCommission, fieldNumber: 12)
      }
      if _storage._agentMarkUp != 0 {
        try visitor.visitSingularDoubleField(value: _storage._agentMarkUp, fieldNumber: 13)
      }
      if _storage._serviceTax != 0 {
        try visitor.visitSingularDoubleField(value: _storage._serviceTax, fieldNumber: 14)
      }
      if _storage._tds != 0 {
        try visitor.visitSingularDoubleField(value: _storage._tds, fieldNumber: 15)
      }
      if _storage._serviceCharge != 0 {
        try visitor.visitSingularDoubleField(value: _storage._serviceCharge, fieldNumber: 16)
      }
      if _storage._totalGstamount != 0 {
        try visitor.visitSingularDoubleField(value: _storage._totalGstamount, fieldNumber: 17)
      }
      if let v = _storage._gst {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 18)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Com_Infinite_Travllr_Hotel_HotelPrice) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._currencyCode != other_storage._currencyCode {return false}
        if _storage._roomPrice != other_storage._roomPrice {return false}
        if _storage._tax != other_storage._tax {return false}
        if _storage._extraGuestCharge != other_storage._extraGuestCharge {return false}
        if _storage._childCharge != other_storage._childCharge {return false}
        if _storage._otherCharges != other_storage._otherCharges {return false}
        if _storage._discount != other_storage._discount {return false}
        if _storage._publishedPrice != other_storage._publishedPrice {return false}
        if _storage._publishedPriceRoundedOff != other_storage._publishedPriceRoundedOff {return false}
        if _storage._offeredPrice != other_storage._offeredPrice {return false}
        if _storage._offeredPriceRoundedOff != other_storage._offeredPriceRoundedOff {return false}
        if _storage._agentCommission != other_storage._agentCommission {return false}
        if _storage._agentMarkUp != other_storage._agentMarkUp {return false}
        if _storage._serviceTax != other_storage._serviceTax {return false}
        if _storage._tds != other_storage._tds {return false}
        if _storage._serviceCharge != other_storage._serviceCharge {return false}
        if _storage._totalGstamount != other_storage._totalGstamount {return false}
        if _storage._gst != other_storage._gst {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Com_Infinite_Travllr_Hotel_HotelResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".HotelResult"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "hotelCode"),
    2: .same(proto: "hotelName"),
    3: .same(proto: "hotelCategory"),
    4: .same(proto: "starRating"),
    5: .same(proto: "hotelDescription"),
    6: .same(proto: "price"),
    7: .same(proto: "hotelPicture"),
    8: .same(proto: "hotelAddress"),
    9: .same(proto: "hotelContactNo"),
    10: .same(proto: "latitude"),
    11: .same(proto: "longitude"),
  ]

  fileprivate class _StorageClass {
    var _hotelCode: String = String()
    var _hotelName: String = String()
    var _hotelCategory: String = String()
    var _starRating: Int32 = 0
    var _hotelDescription: String = String()
    var _price: Com_Infinite_Travllr_Hotel_HotelPrice? = nil
    var _hotelPicture: String = String()
    var _hotelAddress: String = String()
    var _hotelContactNo: String = String()
    var _latitude: String = String()
    var _longitude: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _hotelCode = source._hotelCode
      _hotelName = source._hotelName
      _hotelCategory = source._hotelCategory
      _starRating = source._starRating
      _hotelDescription = source._hotelDescription
      _price = source._price
      _hotelPicture = source._hotelPicture
      _hotelAddress = source._hotelAddress
      _hotelContactNo = source._hotelContactNo
      _latitude = source._latitude
      _longitude = source._longitude
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._hotelCode)
        case 2: try decoder.decodeSingularStringField(value: &_storage._hotelName)
        case 3: try decoder.decodeSingularStringField(value: &_storage._hotelCategory)
        case 4: try decoder.decodeSingularInt32Field(value: &_storage._starRating)
        case 5: try decoder.decodeSingularStringField(value: &_storage._hotelDescription)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._price)
        case 7: try decoder.decodeSingularStringField(value: &_storage._hotelPicture)
        case 8: try decoder.decodeSingularStringField(value: &_storage._hotelAddress)
        case 9: try decoder.decodeSingularStringField(value: &_storage._hotelContactNo)
        case 10: try decoder.decodeSingularStringField(value: &_storage._latitude)
        case 11: try decoder.decodeSingularStringField(value: &_storage._longitude)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._hotelCode.isEmpty {
        try visitor.visitSingularStringField(value: _storage._hotelCode, fieldNumber: 1)
      }
      if !_storage._hotelName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._hotelName, fieldNumber: 2)
      }
      if !_storage._hotelCategory.isEmpty {
        try visitor.visitSingularStringField(value: _storage._hotelCategory, fieldNumber: 3)
      }
      if _storage._starRating != 0 {
        try visitor.visitSingularInt32Field(value: _storage._starRating, fieldNumber: 4)
      }
      if !_storage._hotelDescription.isEmpty {
        try visitor.visitSingularStringField(value: _storage._hotelDescription, fieldNumber: 5)
      }
      if let v = _storage._price {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if !_storage._hotelPicture.isEmpty {
        try visitor.visitSingularStringField(value: _storage._hotelPicture, fieldNumber: 7)
      }
      if !_storage._hotelAddress.isEmpty {
        try visitor.visitSingularStringField(value: _storage._hotelAddress, fieldNumber: 8)
      }
      if !_storage._hotelContactNo.isEmpty {
        try visitor.visitSingularStringField(value: _storage._hotelContactNo, fieldNumber: 9)
      }
      if !_storage._latitude.isEmpty {
        try visitor.visitSingularStringField(value: _storage._latitude, fieldNumber: 10)
      }
      if !_storage._longitude.isEmpty {
        try visitor.visitSingularStringField(value: _storage._longitude, fieldNumber: 11)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Com_Infinite_Travllr_Hotel_HotelResult) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._hotelCode != other_storage._hotelCode {return false}
        if _storage._hotelName != other_storage._hotelName {return false}
        if _storage._hotelCategory != other_storage._hotelCategory {return false}
        if _storage._starRating != other_storage._starRating {return false}
        if _storage._hotelDescription != other_storage._hotelDescription {return false}
        if _storage._price != other_storage._price {return false}
        if _storage._hotelPicture != other_storage._hotelPicture {return false}
        if _storage._hotelAddress != other_storage._hotelAddress {return false}
        if _storage._hotelContactNo != other_storage._hotelContactNo {return false}
        if _storage._latitude != other_storage._latitude {return false}
        if _storage._longitude != other_storage._longitude {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Com_Infinite_Travllr_Hotel_HotelResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".HotelResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "traceId"),
    2: .same(proto: "checkInDate"),
    3: .same(proto: "checkOutDate"),
    4: .same(proto: "preferredCurrency"),
    5: .same(proto: "noOfRooms"),
    6: .same(proto: "roomGuests"),
    7: .same(proto: "hotelResults"),
  ]

  fileprivate class _StorageClass {
    var _traceID: String = String()
    var _checkInDate: String = String()
    var _checkOutDate: String = String()
    var _preferredCurrency: String = String()
    var _noOfRooms: Int32 = 0
    var _roomGuests: Com_Infinite_Travllr_Hotel_RoomGuest? = nil
    var _hotelResults: [Com_Infinite_Travllr_Hotel_HotelResult] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _traceID = source._traceID
      _checkInDate = source._checkInDate
      _checkOutDate = source._checkOutDate
      _preferredCurrency = source._preferredCurrency
      _noOfRooms = source._noOfRooms
      _roomGuests = source._roomGuests
      _hotelResults = source._hotelResults
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._traceID)
        case 2: try decoder.decodeSingularStringField(value: &_storage._checkInDate)
        case 3: try decoder.decodeSingularStringField(value: &_storage._checkOutDate)
        case 4: try decoder.decodeSingularStringField(value: &_storage._preferredCurrency)
        case 5: try decoder.decodeSingularInt32Field(value: &_storage._noOfRooms)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._roomGuests)
        case 7: try decoder.decodeRepeatedMessageField(value: &_storage._hotelResults)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._traceID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._traceID, fieldNumber: 1)
      }
      if !_storage._checkInDate.isEmpty {
        try visitor.visitSingularStringField(value: _storage._checkInDate, fieldNumber: 2)
      }
      if !_storage._checkOutDate.isEmpty {
        try visitor.visitSingularStringField(value: _storage._checkOutDate, fieldNumber: 3)
      }
      if !_storage._preferredCurrency.isEmpty {
        try visitor.visitSingularStringField(value: _storage._preferredCurrency, fieldNumber: 4)
      }
      if _storage._noOfRooms != 0 {
        try visitor.visitSingularInt32Field(value: _storage._noOfRooms, fieldNumber: 5)
      }
      if let v = _storage._roomGuests {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if !_storage._hotelResults.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._hotelResults, fieldNumber: 7)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  func _protobuf_generated_isEqualTo(other: Com_Infinite_Travllr_Hotel_HotelResponse) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._traceID != other_storage._traceID {return false}
        if _storage._checkInDate != other_storage._checkInDate {return false}
        if _storage._checkOutDate != other_storage._checkOutDate {return false}
        if _storage._preferredCurrency != other_storage._preferredCurrency {return false}
        if _storage._noOfRooms != other_storage._noOfRooms {return false}
        if _storage._roomGuests != other_storage._roomGuests {return false}
        if _storage._hotelResults != other_storage._hotelResults {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
